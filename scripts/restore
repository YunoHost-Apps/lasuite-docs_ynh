#!/bin/bash

#=================================================
# IMPORT GENERIC HELPERS
#=================================================

# Keep this path for calling _common.sh inside the execution's context of backup and restore scripts
source ../settings/scripts/_common.sh
source /usr/share/yunohost/helpers

celery_broker_url=$(get_celery_broker_url)

#=================================================
# RESTORE THE APP MAIN DIR
#=================================================
ynh_script_progression "Restoring the app main directory..."

ynh_restore "$install_dir"

chown -R "$app:www-data" "$install_dir"

#=================================================
# RESTORE THE POSTGRESQL DATABASE
#=================================================
ynh_script_progression "Restoring the PostgreSQL database..."

ynh_psql_db_shell < ./db.sql

#=================================================
# RESTORE REDIS AND REGENERATE CONFIG
#=================================================
ynh_script_progression "Restoring Redis and $app's configuration files..."

redis_db=$(ynh_redis_get_free_db)
redis-cli -n "$redis_db" SET __YNH_PROVISIONED "$app"
ynh_app_setting_set --key=redis_db --value=$redis_db

if use_celery; then
    celery_redis_db=$(ynh_redis_get_free_db)
    redis-cli -n "$celery_redis_db" SET __YNH_PROVISIONED "$app"
    ynh_app_setting_set --key=celery_redis_db --value=$celery_redis_db
fi

ynh_config_add --template="env" --destination="$install_dir/.env"
chmod 400 "$install_dir/.env"
chown "$app:$app" "$install_dir/.env"

# YJS
ynh_config_add --template="env_yjs" --destination="$install_dir/.env_yjs"
chmod 400 "$install_dir/.env_yjs"
chown "$app:$app" "$install_dir/.env_yjs"


#=================================================
# RESTORE SYSTEM CONFIGURATION
#=================================================
ynh_script_progression "Restoring system configurations related to $app..."

ynh_restore "/etc/nginx/conf.d/$domain.d/$app.conf"

ynh_restore "/etc/systemd/system/$app.service"
systemctl enable "$app.service" --quiet
yunohost service add "$app" --description="Simple collaborative notetaking" --log="/var/log/$app/$app.log"

ynh_restore "/etc/systemd/system/$app-yprovider.service"
systemctl enable "$app-yprovider.service" --quiet
yunohost service add "$app-yprovider" --description="Yprovider for Docs (La Suite)" --log="/var/log/$app/$app-yprovider.log"

if use_celery; then
    ynh_restore "/etc/systemd/system/$app-celery.service"
    systemctl enable "$app-celery.service" --quiet
    yunohost service add "$app-celery" --description="Celery for Docs (La Suite)" --log="/var/log/$app/$app-celery.log"
fi

ynh_restore "/etc/logrotate.d/$app"

#=================================================
# RESTORE VARIOUS FILES
#=================================================

ynh_restore "/var/log/$app/"

#=================================================
# CONFIGURE MINIO
#=================================================

if [[ "${s3}" =~ minio* ]]; then
  # FIXME: this script is currently in PR for the MinIO app:
  # https://github.com/YunoHost-Apps/minio_ynh/pull/77
  #
  # Also as we are in the context of the restoration script, the "minio" user does not have access
  # to the folders like ../settings.
  # The funky workaround consist in copying the script in the temporary directory.

  tmp_script_path=$(mktemp)
  install -o minio -m 0700 "../settings/scripts/setup_app_bucket.sh" $tmp_script_path
  sudo -u minio bash "$tmp_script_path" --app="$app" --secret="$s3_password" --with-versioning
  ynh_safe_rm "$tmp_script_path"
else
  ynh_die "garage not yet supported"
fi

#=================================================
# SETUP DEX FOR OIDC
#=================================================
setup_dex

#=================================================
# RELOAD NGINX AND THE APP SERVICE
#=================================================
ynh_script_progression "Reloading NGINX web server and $app's service..."

### Typically you only have either $app or PHP-FPM but not both at the same time...
ynh_systemctl --service="$app" --action="start"
ynh_systemctl --service="$app-yprovider" --action="start"
if use_celery; then
    ynh_systemctl --service="$app-celery" --action="start"
fi

ynh_systemctl --service=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression "Restoration completed for $app"
